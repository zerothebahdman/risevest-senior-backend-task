// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["rhel-openssl-1.0.x", "native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name        String             @db.VarChar(50)
  last_name         String             @db.VarChar(50)
  email             String             @unique @db.VarChar(50)
  password          String             @db.Text()
  phoneNumber       String             @db.VarChar(50)
  gender            Gender
  verification      VerificationStatus @default(unverified)
  created_at        DateTime           @default(now())
  update_at         DateTime?          @updatedAt
  deleted_at        DateTime?
  EmailVerification EmailVerification?
  PasswordReset     PasswordReset?
  Post              Post[]
  PostComment       PostComment[]

  @@index([email], name: "idx_users_email")
  @@map("users")
}

model EmailVerification {
  token      String   @id @db.Text()
  user_id    String   @unique @db.Uuid
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  validUntil DateTime @default(dbgenerated("(timezone('utc'::text, now()) + '1 day'::interval)")) @db.Timestamp(6)

  @@map("email-verification")
}

model PasswordReset {
  token      String   @id @db.Text()
  user_id    String   @unique @db.Uuid
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  validUntil DateTime @default(dbgenerated("(timezone('utc'::text, now()) + '1 day'::interval)")) @db.Timestamp(6)

  @@map("password-reset")
}

model Post {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  body         String?       @db.Text()
  user         User?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id      String?       @db.Uuid
  post_type    PostType?
  images       String[]
  created_at   DateTime      @default(now())
  update_at    DateTime?     @updatedAt
  deleted_at   DateTime?
  post_comment PostComment[]

  @@index([user_id])
  @@map("posts")
}

model PostComment {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  body       String    @db.Text()
  user       User?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id    String?   @db.Uuid
  Post       Post?     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post_id    String?   @db.Uuid
  created_at DateTime  @default(now())
  update_at  DateTime? @updatedAt
  deleted_at DateTime?

  @@index([user_id])
  @@index([post_id])
  @@index([created_at])
  @@map("post_comments")
}

enum Gender {
  male
  female
}

enum VerificationStatus {
  verified
  unverified
  deactivated
}

enum PostType {
  image
  text
  text_image
}
